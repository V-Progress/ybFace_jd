package com.yunbiao.ybsmartcheckin_live_id.db2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property FaceId = new Property(1, String.class, "faceId", false, "FACE_ID");
        public final static Property DepartId = new Property(2, long.class, "departId", false, "DEPART_ID");
        public final static Property DepartName = new Property(3, String.class, "departName", false, "DEPART_NAME");
        public final static Property CompanyId = new Property(4, int.class, "companyId", false, "COMPANY_ID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Age = new Property(6, int.class, "age", false, "AGE");
        public final static Property Sex = new Property(7, int.class, "sex", false, "SEX");
        public final static Property Autograph = new Property(8, String.class, "autograph", false, "AUTOGRAPH");
        public final static Property Position = new Property(9, String.class, "position", false, "POSITION");
        public final static Property Number = new Property(10, String.class, "number", false, "NUMBER");
        public final static Property LateNum = new Property(11, int.class, "lateNum", false, "LATE_NUM");
        public final static Property CardId = new Property(12, String.class, "cardId", false, "CARD_ID");
        public final static Property Birthday = new Property(13, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Head = new Property(14, String.class, "head", false, "HEAD");
        public final static Property HeadPath = new Property(15, String.class, "headPath", false, "HEAD_PATH");
        public final static Property AddTag = new Property(16, int.class, "addTag", false, "ADD_TAG");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"FACE_ID\" TEXT UNIQUE ," + // 1: faceId
                "\"DEPART_ID\" INTEGER NOT NULL ," + // 2: departId
                "\"DEPART_NAME\" TEXT," + // 3: departName
                "\"COMPANY_ID\" INTEGER NOT NULL ," + // 4: companyId
                "\"NAME\" TEXT," + // 5: name
                "\"AGE\" INTEGER NOT NULL ," + // 6: age
                "\"SEX\" INTEGER NOT NULL ," + // 7: sex
                "\"AUTOGRAPH\" TEXT," + // 8: autograph
                "\"POSITION\" TEXT," + // 9: position
                "\"NUMBER\" TEXT," + // 10: number
                "\"LATE_NUM\" INTEGER NOT NULL ," + // 11: lateNum
                "\"CARD_ID\" TEXT," + // 12: cardId
                "\"BIRTHDAY\" TEXT," + // 13: birthday
                "\"HEAD\" TEXT," + // 14: head
                "\"HEAD_PATH\" TEXT," + // 15: headPath
                "\"ADD_TAG\" INTEGER NOT NULL );"); // 16: addTag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(2, faceId);
        }
        stmt.bindLong(3, entity.getDepartId());
 
        String departName = entity.getDepartName();
        if (departName != null) {
            stmt.bindString(4, departName);
        }
        stmt.bindLong(5, entity.getCompanyId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getAge());
        stmt.bindLong(8, entity.getSex());
 
        String autograph = entity.getAutograph();
        if (autograph != null) {
            stmt.bindString(9, autograph);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(10, position);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(11, number);
        }
        stmt.bindLong(12, entity.getLateNum());
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(13, cardId);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(14, birthday);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(15, head);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(16, headPath);
        }
        stmt.bindLong(17, entity.getAddTag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(2, faceId);
        }
        stmt.bindLong(3, entity.getDepartId());
 
        String departName = entity.getDepartName();
        if (departName != null) {
            stmt.bindString(4, departName);
        }
        stmt.bindLong(5, entity.getCompanyId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getAge());
        stmt.bindLong(8, entity.getSex());
 
        String autograph = entity.getAutograph();
        if (autograph != null) {
            stmt.bindString(9, autograph);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(10, position);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(11, number);
        }
        stmt.bindLong(12, entity.getLateNum());
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(13, cardId);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(14, birthday);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(15, head);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(16, headPath);
        }
        stmt.bindLong(17, entity.getAddTag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // faceId
            cursor.getLong(offset + 2), // departId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // departName
            cursor.getInt(offset + 4), // companyId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.getInt(offset + 6), // age
            cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // autograph
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // position
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // number
            cursor.getInt(offset + 11), // lateNum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // cardId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // birthday
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // head
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // headPath
            cursor.getInt(offset + 16) // addTag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFaceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDepartId(cursor.getLong(offset + 2));
        entity.setDepartName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyId(cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAge(cursor.getInt(offset + 6));
        entity.setSex(cursor.getInt(offset + 7));
        entity.setAutograph(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPosition(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLateNum(cursor.getInt(offset + 11));
        entity.setCardId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBirthday(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHead(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHeadPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAddTag(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
